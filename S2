第一案
単純に全ての数字を足していけばいいのではないか？
-------------------------------------------------------------
#include <stdio.h>
int main(void){

    int n,i,j,k;
    scanf("%d",&n);
    long ary[100000];
    for(i = 0;i < n;i++) {
        scanf("%d",&ary[i]);
    }
    int s = 0;
    for(i = 0;i < n - 2;i++) {
        for(j = i + 1;j < n - 1;j++) {
            for(k = j + 1;k < n;k++) {
                if((ary[i] + ary[j] + ary[k]) % 7 == 0) {
                    s++;
                }
            }
        }
    }
    printf("%d",s);
    
    return 0;
}
-----------------------------------------------------------
理論上可能ではあるが最大データ数が100000のため100000×99999×99998回もループし、時間がかかりすぎるためやり直し


第二案
それぞれの数字を7で割ったあまりを足したものが7で割れれば7の倍数であるので最初に7で割ることにした
-----------------------------------------------------------------------------
#include <stdio.h>
int main(void){
    int n,i,j;
    unsigned long k; //要求されるメモリが2^32であるためできるだけ多く確保しておく
    scanf("%d",&n);
    int ary[7] = {}; //直接代入するわけではないので配列は初期化しておかないと正しく計算できない
    for(i = 0;i < n ;i++) {
        scanf("%lu",&k); //kはunsigned long型なので%luを使う
        j = k % 7;
        ary[j] = ary[j] + 1;
    }
    //答えの数値もどれだけの桁になるかわからないためできるだけ多く確保しておく
    unsigned long m;
    unsigned long s = 0;
    for(i = 0;i < 7;i++) { //iは0から
        for(j = i;j < 7;j++) { //jはiと同じ数字から
            for(k = j;k < 7;k++) { //重複する組み合わせを防ぐためkはjと同じ数字から
                if((i + j + k) % 7 == 0) {
                    if(i == j && i == k && j == k){ //もしiとjとkが同じならば答えはi'C3であるためi'*i'-1*i'-2/1*2*3で求められる
                        m = ary[i] * (ary[j] - 1) * (ary[k] - 2) / 6;
                        s = s + m;
                    } else if(i == j){ //もしiとjが同じならば答えはi'C2*k'であるため(i'*i'-1)*k'/1*2で求められる
                        m = ary[i] * (ary[j] - 1) * ary[k] / 2;
                        s = s + m;
                    } else if(j == k){ //上に同じ
                        m = ary[i] * ary[j] * (ary[k] - 1) / 2;
                        s = s + m;
                    } else { //余りが全て違うのであればi'*j'*k'でよい
                        m = ary[i] * ary[j] * ary[k];
                        s = s + m;
                    }
                }
            }
        }
    }
    printf("%lu",s);
    
    return 0;
}
--------------------------------------------------------------------------------
